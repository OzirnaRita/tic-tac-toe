{"version":3,"sources":["Cell.js","Board.js","Game.js","serviceWorker.js","index.js"],"names":["Cell","props","value","onClick","react_default","a","createElement","className","Board","_this$props","this","cells","map","cell","index","src_Cell","key","renderCells","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$state","state","whoNext","stepCounter","winner","toConsumableArray","_winLines$filter","filter","combo","_combo","slicedToArray","b","c","winCombo","getWinner","setState","resetGame","Array","fill","gameStatus","_this$state2","concat","renderResetButton","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bc625c2.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Cell(props) {\n  const {value, onClick} = props;\n  return (\n    <div className='board-cell' onClick={onClick}>\n      {value}\n    </div>\n  )\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\n\nclass Board extends React.Component{\n\n  renderCells() {\n    const {cells, onClick} = this.props;\n    return cells.map((cell, index) => {\n      return (\n        <Cell\n          value={cell} \n          key={'cell-'+index} \n          onClick={() => { onClick(index) }}\n        />\n      )\n    })\n  }\n  render() {\n    return (\n      <div className='board'>\n      {\n        this.renderCells()\n      }\n     </div>\n    )\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: 'X',\n      winner: null\n    }\n  }\n\n  handleClick = (index) => {\n    let {cells, whoNext, stepCounter, winner} = this.state;\n    cells = [...cells];\n    if (cells[index] || winner) {\n      return;\n    }\n    cells[index] = whoNext;\n    whoNext = whoNext === 'X' ? '0' : 'X';\n    stepCounter = stepCounter + 1;\n    winner = getWinner(cells);\n    this.setState({\n      cells,\n      whoNext,\n      stepCounter,\n      winner\n    })\n  }\n\n  resetGame = () => {\n    this.setState({\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: 'X',\n      winner: null\n    })\n  }\n\n  renderResetButton(winner, stepCounter) {\n    if (winner || stepCounter === 10) {\n      return <button onClick = {this.resetGame}>New game!</button>\n    }\n  }\n\n  render () {\n    const {cells, whoNext, winner, stepCounter} = this.state;\n    let gameStatus;\n    if (winner) {\n      gameStatus = `Player ${winner} wins!`\n    } else if (stepCounter === 10) {\n      gameStatus = 'It is a DRAW!'\n    } else {\n      gameStatus = `Player ${whoNext}, your turn!`\n    }\n    return (\n    <div className=\"Game\">\n      <h1>Tic Tac Toe, step: { stepCounter }</h1>\n      <h3>{ gameStatus }</h3>\n      {\n        this.renderResetButton(winner,stepCounter)\n      }\n      <Board cells={cells} onClick={this.handleClick}/>\n      </div>\n    );\n  }\n}\n\nfunction getWinner(cells) {\n  const winLines = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6]\n  ];\n\n  const [winCombo] = winLines.filter((combo) => {\n    let [a,b,c] = combo;\n    return cells[a] && cells[a] === cells[b] && cells[b] === cells[c];\n  })\n  if (winCombo) {\n    return cells[winCombo[0]]\n  } else {\n    return null;\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}